#include <iostream>   // For std::cout, std::endl, std::ios_base, std::cin.tie
#include <vector>     // For std::vector
#include <cstdint>    // For uint32_t, uint64_t
#include <limits>     // For std::numeric_limits
#include <chrono>     // For high-resolution timing
#include <iomanip>    // For std::fixed, std::setprecision

// LCG class to manage state and generate numbers
class LCG {
private:
    uint32_t current_seed;
    const uint32_t a_const = 1664525;
    const uint32_t c_const = 1013904223;
    // The modulus m = 2^32 is implicitly handled by uint32_t arithmetic.

public:
    // Constructor initializes the LCG with a given seed.
    LCG(uint32_t seed) : current_seed(seed) {}

    // Generates the next number in the LCG sequence.
    uint32_t next() {
        // Calculate (a * value + c) using uint64_t to prevent overflow
        // before the result is implicitly truncated to uint32_t (modulo 2^32).
        current_seed = (static_cast<uint64_t>(a_const) * current_seed + c_const);
        return current_seed;
    }
};

// Calculates the maximum subarray sum for a given set of parameters.
// Uses the O(N^2) brute-force approach as in the Python code.
long long max_subarray_sum(int n, uint32_t seed, int min_val, int max_val) {
    LCG lcg_gen(seed);
    // Use std::vector<int> for random_numbers as individual values are small.
    std::vector<int> random_numbers(n);
    int range_size = max_val - min_val + 1;

    // Generate N random numbers.
    for (int i = 0; i < n; ++i) {
        random_numbers[i] = (lcg_gen.next() % range_size) + min_val;
    }

    // Initialize max_sum to the smallest possible long long value,
    // equivalent to Python's float('-inf').
    long long max_sum = std::numeric_limits<long long>::min();

    // Brute-force O(N^2) calculation of maximum subarray sum.
    for (int i = 0; i < n; ++i) {
        long long current_sum = 0; // current_sum must be long long to prevent overflow
                                   // as it accumulates up to N * max_val.
        for (int j = i; j < n; ++j) {
            current_sum += random_numbers[j];
            if (current_sum > max_sum) {
                max_sum = current_sum;
            }
        }
    }
    return max_sum;
}

// Calculates the total maximum subarray sum over 20 runs,
// each with a new seed generated by the initial LCG.
long long total_max_subarray_sum(int n, uint32_t initial_seed, int min_val, int max_val) {
    long long total_sum = 0; // total_sum must be long long to accumulate results.
    LCG lcg_gen(initial_seed);

    // Loop 20 times, as specified in the Python code.
    for (int _ = 0; _ < 20; ++_) {
        uint32_t seed = lcg_gen.next(); // Get a new seed for each run.
        total_sum += max_subarray_sum(n, seed, min_val, max_val);
    }
    return total_sum;
}

int main() {
    // Optimize C++ standard streams for faster input/output.
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    // Parameters as defined in the Python script.
    int n = 10000;         // Number of random numbers
    uint32_t initial_seed = 42; // Initial seed for the LCG
    int min_val = -10;     // Minimum value of random numbers
    int max_val = 10;      // Maximum value of random numbers

    // Record the start time for performance measurement.
    auto start_time = std::chrono::high_resolution_clock::now();

    // Call the main function to perform the calculation.
    long long result = total_max_subarray_sum(n, initial_seed, min_val, max_val);

    // Record the end time and calculate the duration.
    auto end_time = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end_time - start_time;

    // Print the results, formatted similarly to the Python output.
    std::cout << "Total Maximum Subarray Sum (20 runs): " << result << std::endl;
    std::cout << "Execution Time: " << std::fixed << std::setprecision(6) << duration.count() << " seconds" << std::endl;

    return 0;
}
